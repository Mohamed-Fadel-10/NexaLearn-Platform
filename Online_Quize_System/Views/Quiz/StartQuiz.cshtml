@using Infrastructure.ViewModels
@using Newtonsoft.Json
@using System.Globalization
@model QuizViewModel

@{
    ViewData["Title"] = "Take Quiz";
    Layout = "_Layout";
    string formattedDuration = Model.Duration.HasValue
          ? Model.Duration.Value.ToString(@"hh\:mm\:ss", CultureInfo.InvariantCulture)
          : "";
}
<head>
    <link href="~/css/quiz.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
</head>
<div class="quiz-wrapper">
    <div id="demo"></div> 

    <div class="quiz-header text-center">
        <h2 class="quiz-title">@Model.Name</h2>
        <p class="quiz-description">@Model.Description</p>
    </div>

    <div id="quiz-container" class="container quiz-container"></div>

    <div class="quiz-footer text-center mt-3">
        <button id="previous-button" class="btn btn-secondary ml-2" onclick="previousQuestion()" style="display: none;">Previous</button>
        <span id="question-counter">1 of @Model.Questions.Count() Questions</span>
        <button id="next-button" class="btn btn-primary ml-2" onclick="nextQuestion()">Next</button>
        <button id="finish-button" class="btn btn-success ml-2" onclick="finishQuiz()" style="display: none;">Finish</button>
    </div>

    <form id="quiz-form" method="post" action="@Url.Action("Evaluate", "Users")">
        @Html.AntiForgeryToken()
        <input type="hidden" name="answers" id="answers">
        <input type="hidden" name="SectionID" value="@ViewBag.SectionId">
    </form>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/QuizHub")
            .build();

        connection.start().catch(err => console.error(err.toString()));

        let userId = '@ViewBag.UserId';
        let quizId = '@Model.QuizID';
        let UserName = '@ViewBag.UserName';
        let quizSession = '@Model.SessionID';
        let questions = @Html.Raw(JsonConvert.SerializeObject(Model.Questions));
        let currentQuestionIndex = 0;
        let answers = JSON.parse(localStorage.getItem(`quiz-${quizId}-answers`)) || [];

        function displayQuestion(index) {
            const question = questions[index];
            const container = document.getElementById('quiz-container');
            container.innerHTML = '';

            let questionHtml = `<div class="card">
                                    <div class="card-body">
                                        <h4 class="card-title">Question ${index + 1}</h4>
                                        <h5 class="card-text">${question.QuestionText}</h5>
                                        <p class="card-text">Hint: ${question.Hint}</p>
                                        <p class="card-text">Points: ${question.Points}</p>
                                `;

            const storedAnswer = answers.find(a => a.QuestionID === question.Id)?.Answer;

            if (question.Type === 2 /* TrueFalse */) {
                questionHtml += `<div class="form-check">
                                        <input class="form-check-input" type="radio" name="option" id="true" value="true" ${storedAnswer === "true" ? "checked" : ""}>
                                        <label class="form-check-label" for="true">True</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="option" id="false" value="false" ${storedAnswer === "false" ? "checked" : ""}>
                                        <label class="form-check-label" for="false">False</label>
                                    </div>`;
            } else if (question.Type === 3 /* MultipleChoice */) {
                question.Options.forEach((option, i) => {
                    questionHtml += `<div class="form-check">
                                            <input class="form-check-input" type="radio" name="option" id="option${i}" value="${option.Text}" ${storedAnswer === option.Text ? "checked" : ""}>
                                            <label class="form-check-label" for="option${i}">${option.Text}</label>
                                        </div>`;
                });
            } else if (question.Type === 1 /* ShortText */) {
                questionHtml += `<div class="form-group">
                                        <input type="text" class="form-control" name="answer" id="answer" placeholder="Your answer" value="${storedAnswer || ''}">
                                    </div>`;
            }

            questionHtml += `</div></div>`;
            container.innerHTML = questionHtml;

            document.getElementById('question-counter').innerText = `${index + 1} of ${questions.length} Questions`;

            document.getElementById('previous-button').style.display = index === 0 ? 'none' : 'block';

            if (questions.length === 1) {
                document.getElementById('next-button').style.display = 'none';
                document.getElementById('finish-button').style.display = 'block';
            } else if (currentQuestionIndex === questions.length - 1) {
                document.getElementById('next-button').style.display = 'none';
                document.getElementById('finish-button').style.display = 'block';
            }
        }


        function getSelectedAnswer() {
            const question = questions[currentQuestionIndex];
            let answer = '';

            if (question.Type === 2 || question.Type === 3) {
                const options = document.getElementsByName('option');
                for (let i = 0; i < options.length; i++) {
                    if (options[i].checked) {
                        answer = options[i].value;
                        break;
                    }
                }
            } else if (question.Type === 1) {
                answer = document.getElementById('answer').value;
            }

            return {
                UserId: userId,
                QuizID: quizId,
                QuestionID: question.Id,
                Answer: answer
            };
        }

        function nextQuestion() {
            const answerData = getSelectedAnswer();
            answers[currentQuestionIndex] = answerData;
            localStorage.setItem(`quiz-${quizId}-answers`, JSON.stringify(answers));

            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                displayQuestion(currentQuestionIndex);

                if (currentQuestionIndex === questions.length - 1) {
                    document.getElementById('next-button').style.display = 'none';
                    document.getElementById('finish-button').style.display = 'block';
                }

                if (currentQuestionIndex > 0) {
                    document.getElementById('previous-button').style.display = 'block';
                }
            }
        }

        function previousQuestion() {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion(currentQuestionIndex);

                document.getElementById('next-button').style.display = 'block';
                document.getElementById('finish-button').style.display = 'none';

                if (currentQuestionIndex === 0) {
                    document.getElementById('previous-button').style.display = 'none';
                }
            }
        }

        displayQuestion(currentQuestionIndex);

        /////////////////////////////////////////////

    </script>
    <script>
        var countDownDuration = "@formattedDuration".split(":");
        var storedEndTime = sessionStorage.getItem(`quiz-${quizId}-end-time`);
        var endTime;

        if (storedEndTime) {
            endTime = parseInt(storedEndTime);
        } else {
            var now = new Date().getTime();
            endTime = now + (parseInt(countDownDuration[0]) * 3600000) + (parseInt(countDownDuration[1]) * 60000) + (parseInt(countDownDuration[2]) * 1000);
            sessionStorage.setItem(`quiz-${quizId}-end-time`, endTime);
        }

        var x = setInterval(function () {
            var now = new Date().getTime();
            var remainingTime = endTime - now;

            sessionStorage.setItem(`quiz-${quizId}-end-time`, endTime);

            var hours = Math.floor((remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);

            document.getElementById("demo").innerHTML = hours + "h " + minutes + "m " + seconds + "s ";

            if (remainingTime < 0) {
                clearInterval(x);
                sessionStorage.removeItem(`quiz-${quizId}-end-time`);
                finishQuiz(); 
            }
        }, 1000);

        function finishQuiz() {
            const answerData = getSelectedAnswer();
            answers[currentQuestionIndex] = answerData;
            localStorage.setItem(`quiz-${quizId}-answers`, JSON.stringify(answers));

            document.getElementById('answers').value = JSON.stringify(answers);
            document.getElementById('quiz-form').submit();

            localStorage.removeItem(`quiz-${quizId}-answers`);

            sessionStorage.removeItem(`quiz-${quizId}-end-time`);

            const submissionDate = new Date().toISOString();
            connection.invoke("NotifyAdmin", quizId, quizSession, userId, UserName, submissionDate)
                .then(() => {
                    alert("Quiz has finished, you will be redirected to the home page.");
                })
                .catch(err => console.error(err.toString()));
        }
    </script>





}